# coding=utf-8
import math
import numpy as np
import parametros

actuatorValue = 0
parametros.flag['impedance'] = False
parametros.flag['temperature'] = False
parametros.flag['callErrorWindow'] = False

def getImpedance(measuredVoltage,measuredCurrent):
   if(measuredCurrent>0.0):
      impedance = measuredVoltage/measuredCurrent
   else:
      impedance = "INF"
      parametros.flag['impedance'] = True
   return impedance

#Teste Controle AGC - Peter
def controlAGC (measuredImpedance):
   if(measuredImpedance>=0 and measuredImpedance<=50):
      agc = 0
   elif(measuredImpedance>50 and measuredImpedance<=100):
      agc = 1
   elif(measuredImpedance>100):
      agc = 2
   else:
      agc = 5
   return agc


def getPower(measuredVoltage,measuredCurrent):
   power = measuredVoltage*measuredCurrent
   print power
   return power


def impedanceCalc(powerValue,measuredVoltage,measuredCurrent):
   print "Potencia Desejada: " + str(powerValue)
   print "Tensao Medida: " + str(measuredVoltage)
   print "Corrente Medida: " + str(measuredCurrent)
   if (measuredCurrent < 0.2) or (measuredVoltage<0.2): #Se a corrente for desprezível
      impedance = 50 # impedancia base (chutando impedancia)
   else:
      impedance = measuredVoltage/measuredCurrent
   print "Impedancia calculada: " + str(impedance)
   newVoltage = math.sqrt(powerValue*impedance)
   return newVoltage

# def applyVoltage(address,dacAddress,desiredValue):
#    global actuatorValue
#    if(desiredValue>255):
#       desiredValue = 255
#    elif(desiredValue<0):
#       desiredValue = 0
#    else:
#        for x in xrange(0,10):
#          try:
#             actuatorValue += desiredValue
#             bus.write_byte_data(address,dacAddress,desiredValue)
#             callErrorWindow = False
#             break #sai do for se chegar aqui
#          except Exception, e:
#             logger.error('Erro na escrita do DAC', exc_info=True)
#             callErrorWindow = True

#        if(callErrorWindow):
#             logger.error('Nao foi possivel realizar a escrita no DAC')
#             os.system("sudo /usr/bin/python error_window.py")  #inumeros problemas com a execução de GUI em uma interrupçao, optou-se por executar o codigo referente a janela de erro.
#             GPIO.cleanup()
#             moniDialog.close()




def errorCalc(measuredValue,idealValue,calculatedImpedance):
   measuredValue = getInterpRevVoltage(measuredValue,calculatedImpedance)
   idealValue = getInterpRevVoltage(idealValue,calculatedImpedance)

   # dacResolution = 0.01960784314
   dacResolution = 0.01568627451
   smallestError = 0.02

   print "Valor Medido: "+str(measuredValue)
   print "Valor Ideal: " + str(idealValue)


   measuredError = idealValue - measuredValue
   print "Erro Medido: " + str(measuredError)
   absError = abs(measuredError)
   print "Erro Medido(Abs): " + str(absError)
   errorBits = int(absError/dacResolution)
   print "Erro Medido(Bits): " + str(errorBits)


   if (absError<smallestError): #Erro menor que resolucao
      increment = 0 #Nada a fazer aqui
   else: #Erro pode ser corrigido
      if(absError>=5.0): #Caso o erro seja maior do que a saída máx. do DAC
         errorBits = 255
         increment = errorBits
      elif(measuredError > 0.0): #Erro positivo
         print "Positive Error!"
         increment = errorBits
      elif(measuredError < 0.0): #Erro negativo
         print "Negative Error!"
         increment = -errorBits
      else:
         increment = 41
   print "Error (bits) modificado: " + str(increment)
   return increment + 41 # ajuste para offset de 0.8

def controlImpedance(measuredImpedance):
   impMinValue = 0.5
   impMaxValue = 250
   if(measuredImpedance<impMinValue): #Impedancia muito baixa (Curto-circuito)
      parametros.flag['impedance'] = True
   elif(measuredImpedance>=impMaxValue): # Impedancia muito alta (Circuito aberto)
      parametros.flag['impedance'] = True
   else:
         parametros.flag['impedance'] = False
   return parametros.flag['impedance']

def controlTemperature(measuredTemperature):
   tempMaxValue = parametros.todos['temperaturaMax']
   if(measuredTemperature>=tempMaxValue): # Temperatua muito alta
      parametros.flag['temperature'] = True
   else:
      parametros.flag['temperature'] = False
   return parametros.flag['temperature']

volt_adc_300 = [0.0196, 0.2745, 0.3922, 0.4118, 0.4706, 0.7255, 0.8431, 1.0196, 1.1569, 1.2745, 1.2941, 1.4706, 1.9804, 2.451, 1.6863, 2.8039, 3.098, 3.2549, 3.4706, 3.6078]
volt_adc_250 = [0.0196, 0.0196, 0.5294, 0.6078, 0.7059, 0.9216, 1.0392, 1.1765, 1.3922, 1.5882, 2.3333, 2.8431, 3.2549, 3.2157, 3.5882, 3.7255, 3.902]
volt_adc_200 = [0.0196, 0.0, 0.0196, 0.2941, 0.3922, 0.451, 0.5686, 0.6863, 0.8824, 0.9608, 1.1373, 1.2745, 1.3922, 1.8824, 2.3922, 2.6863, 2.9412]
volt_adc_150 = [0.0196, 0.0196, 0.2157, 0.2353, 0.3922, 0.5098, 0.6275, 0.7647, 0.902, 1.0392, 1.098, 1.1961, 1.3333, 1.3922, 1.8039, 2.2745, 2.3725, 2.9216, 3.0392]
volt_adc_100 = [0.0196, 0.0196, 0.2353, 0.3137, 0.451, 0.6078, 0.7843, 0.9412, 1.098, 1.1961, 1.2157, 1.902, 2.4314, 2.8039]
volt_adc_50 =  [0.0, 0.0196, 0.0196, 0.0196, 0.0, 0.0196, 0.0196, 0.0588, 0.1373, 0.2353, 0.3137, 0.3725, 0.4706, 0.5098, 0.5882, 0.6471, 0.6863, 0.7451, 0.7843, 0.8824, 0.9608, 0.902, 1.0196, 1.0, 1.1569, 1.1569, 1.1373, 1.2353, 1.2353, 1.2353, 1.3333, 1.4314, 1.2941, 1.4314]

volt_real_300 = [1.45, 48.2, 49.9, 52.2, 56.9, 62.1, 68.4, 74.9, 79.9, 85.5, 90.5, 95.2, 99.3, 103.0, 107.0, 111.0, 114.0, 117.0, 121.0, 124.0]
volt_real_250 = [1.48, 47.7, 49.8, 52.2, 56.8, 62.4, 68.5, 74.5, 79.3, 85.1, 90.1, 94.9, 98.9, 103.0, 107.0, 111.0, 114.0]
volt_real_200 = [1.48, 47.7, 49.8, 52.2, 56.8, 62.4, 68.5, 74.5, 79.3, 85.1, 90.1, 94.9, 98.9, 103.0, 107.0, 111.0, 114.0]
volt_real_150 = [1.58, 34.2, 35.6, 37.5, 41.2, 45.5, 49.5, 53.4, 57.8, 61.3, 65.1, 68.5, 71.4, 74.2, 77.3, 80.0, 83.2, 85.7, 88.3]
volt_real_100 = [1.55, 32.8, 34.2, 36.1, 40.1, 44.6, 49.8, 54.5, 59.4, 63.9, 67.7, 71.8, 75.2, 81.6]
volt_real_50 =  [1.41, 12.0, 12.6, 13.1, 14.4, 16.2, 18.0, 19.8, 21.4, 22.9, 24.4, 25.8, 27.2, 28.4, 29.6, 30.9, 31.8, 32.9, 34.1, 35.3, 36.4, 37.5, 38.6, 39.6, 40.7, 41.9, 42.9, 42.6, 43.4, 44.6, 45.5, 46.3, 46.7, 46.9]


cur_adc_300 = [0.0196, 0.2941, 0.3529, 0.3725, 0.4314, 0.6078, 0.7451, 0.9216, 1.1373, 1.1961, 1.2745, 1.4118, 1.4706, 1.8824, 2.098, 2.6863, 1.9412, 3.1176, 3.4118, 3.4314]
cur_adc_250 = [0.0196, 0.0196, 0.4706, 0.5882, 0.6863, 0.8039, 0.9608, 1.1176, 1.2353, 1.6863, 2.0392, 2.6667, 2.1176, 3.3922, 3.4706, 3.6863, 3.7255]
cur_adc_200 = [0.0196, 0.0196, 0.0196, 0.0196, 0.3333, 0.4314, 0.5686, 0.6863, 0.8824, 0.9412, 1.1176, 1.2745, 1.4314, 2.0, 2.3725, 2.7255, 2.8627]
cur_adc_150 = [0.0196, 0.0196, 0.2549, 0.2941, 0.4118, 0.549, 0.6863, 0.8235, 0.9412, 1.0, 1.1569, 1.098, 1.2745, 1.3725, 2.0196, 2.1373, 2.5098, 2.9608, 3.098]
cur_adc_100 = [0.0392, 0.0196, 0.2745, 0.2941, 0.4902, 0.6078, 0.7843, 0.9216, 1.1176, 1.2157, 1.8431, 2.3137, 2.8039, 3.098]
cur_adc_50 =  [0.0196, 0.0196, 0.0196, 0.0196, 0.0196, 0.0588, 0.0784, 0.1765, 0.2549, 0.3725, 0.4314, 0.4902, 0.6078, 0.6863, 0.7647, 0.8431, 0.7843, 0.8431, 0.8824, 0.9804, 1.098, 1.0196, 1.0588, 1.1176, 1.2353, 1.2157, 1.2745, 1.2745, 1.3725, 1.7451, 1.8627, 1.9412, 1.8235, 2.1176]

cur_real_300 = [0.0048, 0.1607, 0.1663, 0.174, 0.1897, 0.207, 0.228, 0.2497, 0.2663, 0.285, 0.3017, 0.3173, 0.331, 0.3433, 0.3567, 0.37, 0.38, 0.39, 0.4033, 0.4133]
cur_real_250 = [0.0059, 0.1908, 0.1992, 0.2088, 0.2272, 0.2496, 0.274, 0.298, 0.3172, 0.3404, 0.3604, 0.3796, 0.3956, 0.412, 0.428, 0.444, 0.57]
cur_real_200 = [0.0074, 0.2385, 0.249, 0.261, 0.284, 0.312, 0.3425, 0.3725, 0.3965, 0.4255, 0.4505, 0.4745, 0.4945, 0.515, 0.535, 0.555, 0.57]
cur_real_150 = [0.0105, 0.228, 0.2373, 0.25, 0.2747, 0.3033, 0.33, 0.356, 0.3853, 0.4087, 0.434, 0.4567, 0.476, 0.4947, 0.5153, 0.5333, 0.5547, 0.5713, 0.5887]
cur_real_100 = [0.0155, 0.328, 0.342, 0.361, 0.401, 0.446, 0.498, 0.545, 0.594, 0.639, 0.677, 0.718, 0.752, 0.816]
cur_real_50 =  [0.0282, 0.24, 0.252, 0.262, 0.288, 0.324, 0.36, 0.396, 0.428, 0.458, 0.488, 0.516, 0.544, 0.568, 0.592, 0.618, 0.636, 0.658, 0.682, 0.706, 0.728, 0.75, 0.772, 0.792, 0.814, 0.838, 0.858, 0.852, 0.868, 0.892, 0.91, 0.926, 0.934, 0.938]

def getInterpVoltage(measuredVoltage,calculatedImpedance):
   if(calculatedImpedance<=50):
      return np.interp(measuredVoltage,volt_adc_50,volt_real_50)
   elif(50<calculatedImpedance<=100):
      return np.interp(measuredVoltage,volt_adc_100,volt_real_100)
   elif(100<calculatedImpedance<=150):
      return np.interp(measuredVoltage,volt_adc_150,volt_real_150)
   elif(150<calculatedImpedance<=200):
      return np.interp(measuredVoltage,volt_adc_200,volt_real_200)
   elif(200<calculatedImpedance<=250):
      return np.interp(measuredVoltage,volt_adc_250,volt_real_250)
   else:
      return np.interp(measuredVoltage,volt_adc_300,volt_real_300)

def getInterpRevVoltage(calculatedVoltage,calculatedImpedance):
   if(calculatedImpedance<=50):
      return np.interp(calculatedVoltage,volt_real_50,volt_adc_50)
   elif(50<calculatedImpedance<=100):
      return np.interp(calculatedVoltage,volt_real_100,volt_adc_100)
   elif(100<calculatedImpedance<=150):
      return np.interp(calculatedVoltage,volt_real_150,volt_adc_150)
   elif(150<calculatedImpedance<=200):
      return np.interp(calculatedVoltage,volt_real_200,volt_adc_200)
   elif(200<calculatedImpedance<=250):
      return np.interp(calculatedVoltage,volt_real_250,volt_adc_250)
   else:
      return np.interp(calculatedVoltage,volt_real_300,volt_adc_300)

def getInterpCurrent(measuredCurrent,calculatedImpedance):
   if(calculatedImpedance<=50):
      return np.interp(measuredCurrent,cur_real_50,cur_adc_50)
   elif(50<calculatedImpedance<=100):
      return np.interp(measuredCurrent,cur_real_100,cur_adc_100)
   elif(100<calculatedImpedance<=150):
      return np.interp(measuredCurrent,cur_real_150,cur_adc_150)
   elif(150<calculatedImpedance<=200):
      return np.interp(measuredCurrent,cur_real_200,cur_adc_200)
   elif(200<calculatedImpedance<=250):
      return np.interp(measuredCurrent,cur_real_250,cur_adc_250)
   else:
      return np.interp(measuredCurrent,cur_real_300,cur_adc_300)

# print len(volt_adc_0)
# print len(volt_real_300)
# print getInterpVoltage(1,50)
# print getInterpRevVoltage(31.349,50)